import 'source-map-support/register';
import * as fs from 'fs';
import * as path from 'path';
import * as ejs from 'ejs';
import * as TYPES from './types';
import * as minimist from 'minimist';

var args = minimist(process.argv.slice(2));

let specfile = args['_'] && args['_'][0];

if (!specfile || !fs.existsSync(specfile)) {
    throw "No specification file specified, you must provide a spec json file.";
}

let options = {
    outputDir: args['o'] || args['outdir'] || './output',
    filename: args['f'] || args['filename'] || 'serialization.ts'
}

let spec = JSON.parse(fs.readFileSync(specfile).toString());
let definition = {
    TYPES,
    Models: spec,
    ModuleName: 'TransferModels',
    capitalize,
    capitalizeType
};


if (!fs.existsSync(options.outputDir)) fs.mkdirSync(options.outputDir);

let autogeneratedWarning = `
/*
------------------------------------------
THIS CODE IS AUTO-GENERATED.  DO NOT EDIT.
------------------------------------------
*/
`;

let structSource = getTemplate('struct.ts');
let serializerResult = renderTemplate('serialization.ejs', definition);

let output = [
        autogeneratedWarning, 
        structSource,
        serializerResult
    ].join('');

let outputFile = path.join(options.outputDir, options.filename);

fs.writeFileSync(outputFile, output);




/*
------------------------------------------
Helper Functions
------------------------------------------
*/

function capitalizeType(string) {
    if (string.charAt(0) === 'u') {
        return 'U' + capitalize(string.slice(1));
    }

    return capitalize(string);
}

function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function getTemplate(file: string) {
    return fs.readFileSync('./templates/' + file).toString();
}

function renderTemplate(file: string, definition: any) {
    let template = getTemplate(file);
    return ejs.render(template, definition);
}